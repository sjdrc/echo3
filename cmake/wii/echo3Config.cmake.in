include(CMakeFindDependencyMacro)

option(BUILD_TOOLS "VFS directory" "resources")

find_package(libogc CONFIG REQUIRED)
find_dependency(Boost REQUIRED regex)
find_dependency(Box2D CONFIG REQUIRED)
find_dependency(CapnProto CONFIG REQUIRED)
find_dependency(utf8cpp CONFIG REQUIRED)
find_dependency(websocketpp CONFIG REQUIRED)

if(@BUILD_WITH_EFSW@)
	find_dependency(efsw CONFIG REQUIRED)
endif()

if (NOT PkgConfig_FOUND)
	find_dependency(PkgConfig REQUIRED)
endif ()
pkg_check_modules(bullet REQUIRED IMPORTED_TARGET bullet)
if (@BUILD_WITH_FREETYPE@)
	pkg_check_modules(freetype2 REQUIRED IMPORTED_TARGET freetype2)
endif()
if (@BUILD_WITH_OPENGL@)
	find_dependency(glew CONFIG REQUIRED)
endif()
if (@BUILD_WITH_JPEG@)
	pkg_check_modules(libjpeg REQUIRED IMPORTED_TARGET libjpeg)
endif ()
pkg_check_modules(libmodplug REQUIRED IMPORTED_TARGET libmodplug)
pkg_check_modules(libpng REQUIRED IMPORTED_TARGET libpng)
if (@BUILD_WITH_SSL@)
	pkg_check_modules(libssl REQUIRED IMPORTED_TARGET libssl)
	pkg_check_modules(libcrypto REQUIRED IMPORTED_TARGET libcrypto)
	pkg_check_modules(libtls REQUIRED IMPORTED_TARGET libtls)
endif ()
pkg_check_modules(ogg REQUIRED IMPORTED_TARGET ogg)
pkg_check_modules(tmxparser REQUIRED IMPORTED_TARGET tmxparser)
pkg_check_modules(vorbis REQUIRED IMPORTED_TARGET vorbis)
pkg_check_modules(vorbisfile REQUIRED IMPORTED_TARGET vorbisfile)
pkg_check_modules(zlib REQUIRED IMPORTED_TARGET zlib)

if (@ECHO_QT_UI_FRAMEWORK@)
	find_dependency(Qt5 CONFIG REQUIRED Core Gui OpenGL)
endif()

if (@ECHO_OPENAL_AUDIO_SYSTEM@)
	find_dependency(OpenAL CONFIG REQUIRED)
endif()

if (@ECHO_GTK_UI_FRAMEWORK@)
	pkg_check_modules(gtkmm REQUIRED IMPORTED_TARGET gtkmm-2.4)
	pkg_check_modules(gtkglextmm REQUIRED IMPORTED_TARGET gtkglextmm-1.2)
	set(ECHO_GTK_UI_FRAMEWORK TRUE)
endif()

include("${CMAKE_CURRENT_LIST_DIR}/echo3Targets.cmake")

#Function to build a VFS
function(Echo3BuildVFS directory target)
	add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs
		WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
		COMMAND ${ECHO_ENGINE_INSTALL_DIR}/linux/bin/evfsc ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs ${directory}
		COMMENT "Generating Echo Virtual File System Binary from: ${ECHO_VFS_DIR}"
	)

	if(${ARGC} GREATER 1)
		message("Automatic VFS embedding on Linux is experimental. If you run into problems please report it.")
		add_custom_command(
			OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.o
			DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs
			#COMMAND $ENV{DEVKITPPC}/bin/powerpc-eabi-ld -r -b binary echo.vfs -o echo.vfs.o
			COMMAND $ENV{DEVKITPPC}/bin/powerpc-eabi-objcopy -I binary -O elf32-powerpc -B powerpc --rename-section .data=.rodata,readonly,data,contents,alloc echo.vfs echo.vfs.o
			WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
			COMMENT "Building Echo Virtual File System Object")

		add_custom_target (
			EchoVFS ALL
			DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.o
			)
		add_dependencies(${target} EchoVFS)
		target_link_libraries(${target} PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.o)
	endif()
endfunction()

function(Echo3BuildDOL target)
	add_custom_target (
		DOLFile
		ALL
		DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${target}
		COMMENT "Generating DOL file"
		VERBATIM
		COMMAND $ENV{DEVKITPRO}/tools/bin/elf2dol ${CMAKE_CURRENT_BINARY_DIR}/${target} ${CMAKE_CURRENT_BINARY_DIR}/${target}.dol
		)
	add_dependencies(DOLFile ${target})
endfunction()

#Function to convert protobuf files to binary format
#function(Echo3MaterialsInFolderToBinary directory)
#	add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs
#		WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
#		COMMAND ${ECHO_ENGINE_INSTALL_DIR}/wii/bin/echoConvertResourcesInDirectory wii ${directory}
#		COMMENT "Generating Material binary files in: ${directory}"
#	)
#endfunction()

function(Echo3TargetPlatformConfig target)
	#Echo3MaterialsInFolderToBinary(${ECHO_VFS_DIR})
	if(ECHO_VFS_DIR)
		Echo3BuildVFS(${ECHO_VFS_DIR} ${target})
	else()
		file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.cpp "#include <echo/Types.h>" )
		file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.cpp "// This file provides the symbols for a VFS that the Wii Platform implementation expects to be linked." )
		file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.cpp "// When ECHO_VFS_DIR is specified the created VFS object file provides these symbols." )
		file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.cpp "const Echo::u8 _binary_echo_vfs_start[1] = {0};" )
		file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.cpp "const Echo::Size _binary_echo_vfs_size = 0;" )
		target_sources(${target} PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/echo.vfs.cpp)
	endif()
	Echo3BuildDOL(${target})
endfunction()
